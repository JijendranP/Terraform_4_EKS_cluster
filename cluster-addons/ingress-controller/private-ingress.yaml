apiVersion: v1
kind: Namespace
metadata:
  name: ingress-eksprivate-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-eksprivate-nginx
  labels:
    app: ingress-eksprivate-nginx
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-eksprivate-nginx
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-eksprivate-nginx
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-eksprivate-serviceaccount
  namespace: ingress-eksprivate-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-eksprivate-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-eksprivate-role
  namespace: ingress-eksprivate-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-eksprivate-role-nisa-binding
  namespace: ingress-eksprivate-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-eksprivate-role
subjects:
  - kind: ServiceAccount
    name: nginx-eksprivate-serviceaccount
    namespace: ingress-eksprivate-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-eksprivate-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-eksprivate-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-eksprivate-serviceaccount
    namespace: ingress-eksprivate-nginx
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-eks-http-backend
  labels:
    app: default-eks-http-backend
  namespace: ingress-eksprivate-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: default-eks-http-backend
  template:
    metadata:
      labels:
        app: default-eks-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-eks-http-backend
        # Any image is permissible as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  name: default-eks-http-backend
  namespace: ingress-eksprivate-nginx
  labels:
    app: default-eks-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-eks-http-backend

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-eksprivate-controller
  namespace: ingress-eksprivate-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ingress-eksprivate-nginx
  template:
    metadata:
      labels:
        app: ingress-eksprivate-nginx
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: nginx-eksprivate-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.17.1
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-eks-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-eksprivate-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=private-nginx
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            runAsNonRoot: false
---
kind: Service
apiVersion: v1
metadata:
  name: ingress-eksprivate-nginx
  namespace: ingress-eksprivate-nginx
  labels:
    app: ingress-eksprivate-nginx
  annotations:
    # Specifies whether cross-zone load balancing is enabled for the load balancer
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # Expose this as internal load balancer
    service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"
    # replace with the correct value of the generated certificate in the AWS console Mediaiqdigital.com
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:eu-central-1:230367374156:certificate/d5ea0711-b37c-49de-a407-f5857f09d229"
    # the backend instances are HTTP
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    # Map port 443
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    # Increase the ELB idle timeout to avoid issues with WebSockets or Server-Sent Events.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
    # tags for ELB
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Name=frankfurt-private-ingess-controller,TEAM=Devops,PRODUCT=EKS,ENVIRONMENT=PRODUCTION"
    # health check interval
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: '5'
     # ELB time out
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: '3'
    # health check unhealthy threshold
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: '2'
    # healthy threshold
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: '2'
    # connection draining
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
 
spec:
  type: LoadBalancer
  selector:
    app: ingress-eksprivate-nginx
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: http
